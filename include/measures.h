/*  =========================================================================
    measures - Interface and functions for computing similarity measures for strings

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the  
    Free Software Foundation; either version 3 of the License, or (at your 
    option) any later version.  This program is distributed without any    
    warranty. See the GNU General Public License for more details.         
    =========================================================================
*/

#ifndef MEASURES_H_INCLUDED
#define MEASURES_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/measures.api" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef HARRY_BUILD_DRAFT_API
// Init function for similarity measure implementations
typedef void (measures_config_fn) (
    measures_t *self);

// Compare function for similarity measure implementations. Returns
// distance or simularity measure.                                 
typedef float (measures_compare_fn) (
    measures_t *self, hstring_t *x, hstring_t *y);

//  *** Draft method, for development use, may change without warning ***
//  Creates a new measures instance for the given measure function. Return 
//  a measures instance initialized with measure function default values or
//  NULL if measure function could not be found.                           
HARRY_EXPORT measures_t *
    measures_new (const char *function);

//  *** Draft method, for development use, may change without warning ***
//  Destroys a measures instance.
HARRY_EXPORT void
    measures_destroy (measures_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Compares two strings with the given similarity measure. Returns
//  similarity/dissimilarity value.                                
HARRY_EXPORT float
    measures_compare (measures_t *self, hstring_t *x, hstring_t *y);

//  *** Draft method, for development use, may change without warning ***
//  Sets a string configuration
HARRY_EXPORT void
    measures_config_set_string (measures_t *self, const char *key, const char *value);

//  *** Draft method, for development use, may change without warning ***
//  Sets an integer configuration
HARRY_EXPORT void
    measures_config_set_int (measures_t *self, const char *key, const int value);

//  *** Draft method, for development use, may change without warning ***
//  Sets an float configuration
HARRY_EXPORT void
    measures_config_set_float (measures_t *self, const char *key, const float value);

//  *** Draft method, for development use, may change without warning ***
//  Sets an integer configuration
HARRY_EXPORT void
    measures_config_set_bool (measures_t *self, const char *key, const bool value);

//  *** Draft method, for development use, may change without warning ***
//  Finds best matching measure for name. Returns index of measure found,
//  otherwise 0.                                                         
HARRY_EXPORT int
    measures_match (const char *name);

//  *** Draft method, for development use, may change without warning ***
//  Configures the measure for a given similarity measure with its default
//  values. Returns the name of the selected similarity measure           
HARRY_EXPORT char *
    measures_config (measures_t *self, const char *name);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
HARRY_EXPORT void
    measures_test (bool verbose);

#endif // HARRY_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
