/*  =========================================================================
    measures - Interface and functions for computing similarity measures for strings

Options:
- measures.global_cache = false;
    Enables global cache

- measures.granularity = "bytes";
    This parameter controls the granularity of strings. It can be set to
    either bits, bytes or tokens. Depending in the granularity a string is
    considered as a sequence of bits, bytes or tokens, which results in
    different similarity values during comparison.

- measures.token_delim = "";
    The parameter token_delim defines characters for delimiting tokens in
    strings, for example " %0a%0d".  It is only considered, if the
    granularity is set to tokens, otherwise it is ignored.

- input.decode_str = false;
    If this parameter is set to true, harry automatically decodes strings
    that contain URI-encoded characters.  That is, substrings of the form
    %XX are replaced with the byte corresponding to the hexadecimal number
    XX.

- reverse_str = false;
    If this parameter is set to true, the characters of all input strings
    will be reversed.  Such reversing might help in situations where the
    reading direction of the input strings is unspecified

- input.soundex = false;
    All tokens in the strings are mapped to the soundex index. For example,
    "Pfister" is mapped to "P236" and "Jackson" to "J250".  The soundex
    index has been originally designed for comparing names, however, in
    harry it can be applied to all sorts of tokens, if they are composed of
    alphabetic letters.  Punctation characters are ignored and thus the
    string "Hey, I am here with Harry!", gets mapped to "H000 I000 A500
    H600 W300 H600".

* dist_damerau:
    This module implements the Damerau-Levenshtein distance (see Damerau,
    1964). The runtime and space complexity of a comparison is quadratic in
    the length of the strings.  The following parameters are supported:

    measures.dist_damerau.norm = "none";
        This parameter specifies the normalization of the distance.
        Supported values are "none" for no normalization, "min" for
        normalization on the minimum length, "max" for normalization on the
        maximum length, "avg" for normalization on the average length of
        the compared strings.

    measures.dist_damerau.cost_ins = 1.0;
    measures.dist_damerau.cost_del = 1.0;
    measures.dist_damerau.cost_sub = 1.0;
    measures.dist_damerau.cost_tra = 1.0;
        The computation of the distance can be adapted using four
        parameters defining the cost for an insertion, deletion,
        substitution and transposition, respectively.  The default costs
        are 1.0 for each operation.

* dist_levenshtein:
    This module implements the Levenshtein distance (see Levenshtein, 1966).
    The runtime complexity of a comparison is quadratic in the length of the
    strings. The following parameters are supported:

    measures.dist_levenshtein.norm = "none";
        This parameter specifies the normalization of the distance.
        Supported values are "none" for no normalization, "min" for
        normalization on the minimum length, "max" for normalization on the
        maximum length, "avg" for normalization on the average length of
        the compared

    measures.dist_levenshtein.cost_ins = 1.0;
    measures.dist_levenshtein.cost_del = 1.0;
    measures.dist_levenshtein.cost_sub = 1.0;
        The computation of the distance can be adapted using three
        parameters defining the cost for an insertion, deletion and
        substitution, respectively.  The default costs are 1.0 for each
        operation.

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the  
    Free Software Foundation; either version 3 of the License, or (at your 
    option) any later version.  This program is distributed without any    
    warranty. See the GNU General Public License for more details.         
    =========================================================================
*/

#ifndef MEASURES_H_INCLUDED
#define MEASURES_H_INCLUDED

#ifdef __cplusplus
extern "C" {
#endif

//  @warning THE FOLLOWING @INTERFACE BLOCK IS AUTO-GENERATED BY ZPROJECT
//  @warning Please edit the model at "api/measures.api" to make changes.
//  @interface
//  This API is a draft, and may change without notice.
#ifdef HARRY_BUILD_DRAFT_API
// Init function for similarity measure implementations
typedef void (measures_config_fn) (
    measures_t *self);

// Compare function for similarity measure implementations. Returns
// distance or simularity measure.                                 
typedef float (measures_compare_fn) (
    measures_t *self, hstring_t *x, hstring_t *y);

//  *** Draft method, for development use, may change without warning ***
//  Creates a new measures instance for the given measure function. Return 
//  a measures instance initialized with measure function default values or
//  NULL if measure function could not be found.                           
HARRY_EXPORT measures_t *
    measures_new (const char *function);

//  *** Draft method, for development use, may change without warning ***
//  Destroys a measures instance.
HARRY_EXPORT void
    measures_destroy (measures_t **self_p);

//  *** Draft method, for development use, may change without warning ***
//  Compares two strings with the given similarity measure. Returns
//  similarity/dissimilarity value.                                
HARRY_EXPORT float
    measures_compare (measures_t *self, hstring_t *x, hstring_t *y);

//  *** Draft method, for development use, may change without warning ***
//  Sets a string configuration
HARRY_EXPORT void
    measures_config_set_string (measures_t *self, const char *key, const char *value);

//  *** Draft method, for development use, may change without warning ***
//  Sets an integer configuration
HARRY_EXPORT void
    measures_config_set_int (measures_t *self, const char *key, const int value);

//  *** Draft method, for development use, may change without warning ***
//  Sets an float configuration
HARRY_EXPORT void
    measures_config_set_float (measures_t *self, const char *key, const float value);

//  *** Draft method, for development use, may change without warning ***
//  Sets an integer configuration
HARRY_EXPORT void
    measures_config_set_bool (measures_t *self, const char *key, const bool value);

//  *** Draft method, for development use, may change without warning ***
//  Finds best matching measure for name. Returns index of measure found,
//  otherwise 0.                                                         
HARRY_EXPORT int
    measures_match (const char *name);

//  *** Draft method, for development use, may change without warning ***
//  Configures the measure for a given similarity measure with its default
//  values. Returns the name of the selected similarity measure           
HARRY_EXPORT char *
    measures_config (measures_t *self, const char *name);

//  *** Draft method, for development use, may change without warning ***
//  Self test of this class.
HARRY_EXPORT void
    measures_test (bool verbose);

#endif // HARRY_BUILD_DRAFT_API
//  @end

#ifdef __cplusplus
}
#endif

#endif
