<class name = "measures">
    <!--
    Copyright (C) 2013-2014 Konrad Rieck (konrad@mlsec.org)

    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 3 of the License, or (at your
    option) any later version.  This program is distributed without any
    warranty. See the GNU General Public License for more details.
    -->
    Interface and functions for computing similarity measures for strings

    Options:
    - measures.global_cache = false;
        Enables global cache

    - measures.granularity = "bytes";
        This parameter controls the granularity of strings. It can be set to
        either bits, bytes or tokens. Depending in the granularity a string is
        considered as a sequence of bits, bytes or tokens, which results in
        different similarity values during comparison.

    - measures.token_delim = "";
        The parameter token_delim defines characters for delimiting tokens in
        strings, for example " %0a%0d".  It is only considered, if the
        granularity is set to tokens, otherwise it is ignored.

    - input.decode_str = false;
        If this parameter is set to true, harry automatically decodes strings
        that contain URI-encoded characters.  That is, substrings of the form
        %XX are replaced with the byte corresponding to the hexadecimal number
        XX.

    - reverse_str = false;
        If this parameter is set to true, the characters of all input strings
        will be reversed.  Such reversing might help in situations where the
        reading direction of the input strings is unspecified

    - input.soundex = false;
        All tokens in the strings are mapped to the soundex index. For example,
        "Pfister" is mapped to "P236" and "Jackson" to "J250".  The soundex
        index has been originally designed for comparing names, however, in
        harry it can be applied to all sorts of tokens, if they are composed of
        alphabetic letters.  Punctation characters are ignored and thus the
        string "Hey, I am here with Harry!", gets mapped to "H000 I000 A500
        H600 W300 H600".

    * dist_damerau:
        This module implements the Damerau-Levenshtein distance (see Damerau,
        1964). The runtime and space complexity of a comparison is quadratic in
        the length of the strings.  The following parameters are supported:

        measures.dist_damerau.norm = "none";
            This parameter specifies the normalization of the distance.
            Supported values are "none" for no normalization, "min" for
            normalization on the minimum length, "max" for normalization on the
            maximum length, "avg" for normalization on the average length of
            the compared strings.

        measures.dist_damerau.cost_ins = 1.0;
        measures.dist_damerau.cost_del = 1.0;
        measures.dist_damerau.cost_sub = 1.0;
        measures.dist_damerau.cost_tra = 1.0;
            The computation of the distance can be adapted using four
            parameters defining the cost for an insertion, deletion,
            substitution and transposition, respectively.  The default costs
            are 1.0 for each operation.

    * dist_levenshtein:
        This module implements the Levenshtein distance (see Levenshtein, 1966).
        The runtime complexity of a comparison is quadratic in the length of the
        strings. The following parameters are supported:

        measures.dist_levenshtein.norm = "none";
            This parameter specifies the normalization of the distance.
            Supported values are "none" for no normalization, "min" for
            normalization on the minimum length, "max" for normalization on the
            maximum length, "avg" for normalization on the average length of
            the compared

        measures.dist_levenshtein.cost_ins = 1.0;
        measures.dist_levenshtein.cost_del = 1.0;
        measures.dist_levenshtein.cost_sub = 1.0;
            The computation of the distance can be adapted using three
            parameters defining the cost for an insertion, deletion and
            substitution, respectively.  The default costs are 1.0 for each
            operation.

    <callback_type name = "config_fn">
        Init function for similarity measure implementations
        <argument name = "self" type = "measures" />
    </callback_type>

    <callback_type name = "compare_fn">
        Compare function for similarity measure implementations. Returns
        distance or simularity measure.
        <argument name = "self" type = "measures" />
        <argument name = "x" type = "hstring" />
        <argument name = "y" type = "hstring" />
        <return type = "real" />
    </callback_type>

    <constructor>
        Creates a new measures instance for the given measure function. Return
        a measures instance initialized with measure function default values or
        NULL if measure function could not be found.
        <argument name = "function" type = "string" />
    </constructor>

    <destructor>
        Destroys a measures instance.
    </destructor>

    <method name = "compare">
        Compares two strings with the given similarity measure. Returns
        similarity/dissimilarity value.
        <argument name = "x" type = "hstring" />
        <argument name = "y" type = "hstring" />
        <return type = "real" />
    </method>

    <method name = "config set string">
        Sets a string configuration
        <argument name = "key" type = "string" />
        <argument name = "value" type = "string" />
    </method>

    <method name = "config set int">
        Sets an integer configuration
        <argument name = "key" type = "string" />
        <argument name = "value" type = "integer" mutable = "0"/>
    </method>

    <method name = "config set float">
        Sets an float configuration
        <argument name = "key" type = "string" />
        <argument name = "value" type = "real" mutable = "0"/>
    </method>

    <method name = "config set bool">
        Sets an integer configuration
        <argument name = "key" type = "string" />
        <argument name = "value" type = "boolean" mutable = "0"/>
    </method>

    <method name = "match" singleton = "1">
        Finds best matching measure for name. Returns index of measure found,
        otherwise 0.
        <argument name = "name" type = "string" />
        <return type = "integer" />
    </method>

    <method name = "config">
        Configures the measure for a given similarity measure with its default
        values. Returns the name of the selected similarity measure
        <argument name = "name" type = "string" />
        <return type = "string" mutable = "1" />
    </method>
</class>
