################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
from harry_cffi import ffi
from harry_py_destructors import lib as libwrapper
from build_harry_cffi import lib
from utils import *


class Measures(object):
    """
    Interface and functions for computing similarity measures for strings

Options:
- measures.global_cache = false;
    Enables global cache

- measures.granularity = "bytes";
    This parameter controls the granularity of strings. It can be set to
    either bits, bytes or tokens. Depending in the granularity a string is
    considered as a sequence of bits, bytes or tokens, which results in
    different similarity values during comparison.

- measures.token_delim = "";
    The parameter token_delim defines characters for delimiting tokens in
    strings, for example " %0a%0d".  It is only considered, if the
    granularity is set to tokens, otherwise it is ignored.

- input.decode_str = false;
    If this parameter is set to true, harry automatically decodes strings
    that contain URI-encoded characters.  That is, substrings of the form
    %XX are replaced with the byte corresponding to the hexadecimal number
    XX.

- reverse_str = false;
    If this parameter is set to true, the characters of all input strings
    will be reversed.  Such reversing might help in situations where the
    reading direction of the input strings is unspecified

- input.soundex = false;
    All tokens in the strings are mapped to the soundex index. For example,
    "Pfister" is mapped to "P236" and "Jackson" to "J250".  The soundex
    index has been originally designed for comparing names, however, in
    harry it can be applied to all sorts of tokens, if they are composed of
    alphabetic letters.  Punctation characters are ignored and thus the
    string "Hey, I am here with Harry!", gets mapped to "H000 I000 A500
    H600 W300 H600".

* dist_bag:
    This module implements the bag distance (see Bartolini et al., 2002).
    The distance approximates and lower bounds the Levenshtein distance.
    The runtime complexity of a comparison is linear in the length of the
    strings. The following parameters are supported:

    measures.dist_bag.norm = "none";
        This parameter specifies the normalization of the distance.
        Supported values are "none" for no normalization, "min" for
        normalization on the minimum length, "max" for normalization on the
        maximum length, "avg" for normalization on the average length of
        the compared strings.

* dist_damerau:
    This module implements the Damerau-Levenshtein distance (see Damerau,
    1964). The runtime and space complexity of a comparison is quadratic in
    the length of the strings.  The following parameters are supported:

    measures.dist_damerau.norm = "none";
        This parameter specifies the normalization of the distance.
        Supported values are "none" for no normalization, "min" for
        normalization on the minimum length, "max" for normalization on the
        maximum length, "avg" for normalization on the average length of
        the compared strings.

    measures.dist_damerau.cost_ins = 1.0;
    measures.dist_damerau.cost_del = 1.0;
    measures.dist_damerau.cost_sub = 1.0;
    measures.dist_damerau.cost_tra = 1.0;
        The computation of the distance can be adapted using four
        parameters defining the cost for an insertion, deletion,
        substitution and transposition, respectively.  The default costs
        are 1.0 for each operation.

* dist_levenshtein:
    This module implements the Levenshtein distance (see Levenshtein, 1966).
    The runtime complexity of a comparison is quadratic in the length of the
    strings. The following parameters are supported:

    measures.dist_levenshtein.norm = "none";
        This parameter specifies the normalization of the distance.
        Supported values are "none" for no normalization, "min" for
        normalization on the minimum length, "max" for normalization on the
        maximum length, "avg" for normalization on the average length of
        the compared

    measures.dist_levenshtein.cost_ins = 1.0;
    measures.dist_levenshtein.cost_del = 1.0;
    measures.dist_levenshtein.cost_sub = 1.0;
        The computation of the distance can be adapted using three
        parameters defining the cost for an insertion, deletion and
        substitution, respectively.  The default costs are 1.0 for each
        operation.
    """

    def __init__(self, function):
        """
        Creates a new measures instance for the given measure function. Return 
        a measures instance initialized with measure function default values or
        NULL if measure function could not be found.                           
        """
        p = lib.measures_new(to_bytes(function))
        if p == ffi.NULL:
            raise MemoryError("Could not allocate person")

        # ffi.gc returns a copy of the cdata object which will have the
        # destructor called when the Python object is GC'd:
        # https://cffi.readthedocs.org/en/latest/using.html#ffi-interface
        self._p = ffi.gc(p, libwrapper.measures_destroy_py)

    def compare(self, x, y):
        """
        Compares two strings with the given similarity measure. Returns
        similarity/dissimilarity value.                                
        """
        lib.measures_compare(self._p, x._p, y._p)

    def config_set_string(self, key, value):
        """
        Sets a string configuration
        """
        lib.measures_config_set_string(self._p, to_bytes(key), to_bytes(value))

    def config_set_int(self, key, value):
        """
        Sets an integer configuration
        """
        lib.measures_config_set_int(self._p, to_bytes(key), value)

    def config_set_float(self, key, value):
        """
        Sets an float configuration
        """
        lib.measures_config_set_float(self._p, to_bytes(key), value)

    def config_set_bool(self, key, value):
        """
        Sets an integer configuration
        """
        lib.measures_config_set_bool(self._p, to_bytes(key), value)

    def match(name):
        """
        Finds best matching measure for name. Returns index of measure found,
        otherwise 0.                                                         
        """
        lib.measures_match(to_bytes(name))

    def config(self, name):
        """
        Configures the measure for a given similarity measure with its default
        values. Returns the name of the selected similarity measure           
        """
        lib.measures_config(self._p, to_bytes(name))

    def test(verbose):
        """
        Self test of this class.
        """
        lib.measures_test(verbose)

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
