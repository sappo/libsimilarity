################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Read the zproject/README.md for information about making permanent changes. #
################################################################################
from build_harry_cffi import lib
from harry_cffi import ffi
from harry_py_destructor import lib as libwrapper
from utils import *

class Hstring(object):
    """
    String object with functions for processing strings and sequences
    """


    def __init__(self, str):
        """
        Converts a c-style string into a string object.
        """
        p = lib.hstring_new(to_bytes(str))
        if p == ffi.NULL:
            raise MemoryError("Could not allocate person")

        # ffi.gc returns a copy of the cdata object which will have the
        # destructor called when the Python object is GC'd:
        # https://cffi.readthedocs.org/en/latest/using.html#ffi-interface
        self._p = ffi.gc(p, libwrapper.hstring_destroy_py)


    def hstring_delim_set(self, str):
        """
        Decodes a string containing delimiters into a lookup table.
        """


    def hstring_has_delim(self, ):
        """
        Check whether delimiters have been set. Returns true if delimiters have
        been set, otherwise false.
        """


    def hstring_delim_reset(self, ):
        """
        Resets delimiters table. There is a global table of delimiter symbols
        which is only initialized once the first sequence is processed. This
        functions is used to trigger a re-initialization.
        """


    def hstring_preproc(self, measure):
        """

        """
        lib.hstring_preproc(self._p, measure._p)


    def hstring_tokenify(self, ):
        """
        Converts a string into a sequence of tokens using delimiter characters.
        The original character string is lost. Returns 0 if successful,
        otherwise -1.
        """


    def hstring_bitify(self, ):
        """
        Converts a string into a sequence of bits. Well, actually there is no
        conversion except for that the counting now happens on the level of
        bits instead of bytes.
        """


    def hstring_hash_sub(self, start, len):
        """
        Computes a 64-bit hash for a substring. Collisions are possible but not
        very likely (hopefully). Returns 64-bit hash.
        """


    def hstring_hash1(self, ):
        """
        Computes a 64-bit hash for a string. The hash is used at different
        locations.  Collisions are possible but not very likely (hopefully).
        Returns 64-bit hash.
        """


    def hstring_hash2(self, x, y):
        """
        Computes a 64-bit hash for two strings. The computation is symmetric,
        that is, the same strings retrieve the same hash independent of their
        order.  Collisions are possible but not very likely (hopefully). Return
        64-bit hash.
        """


    def hstring_get(self, pos):
        """
        Returns symbol/character at given position.
        """


    def hstring_soundex(self, ):
        """
        Perform a soundex transformation of each token.

        Soundex code as implemented by Kevin Setter, 8/27/97 with some slight
        modifications. Known bugs: Consonants separated by a vowel are treated
        as one character, if they have the same index. This is wrong. :(
        """


    def hstring_compare(self, x, posx, y, posy):
        """
        Compares two symbols/characters. Returns 0 if equal, < 0 if x smaller,
        > 0 if y smaller
        """


    def hstring_print(self):
        """
        Print string object
        """
        lib.hstring_print(self._p)


    def hstring_stoptokens_load(self, filename):
        """
        Reads stop tokens from file and hash them.
        """


    def hstring_stoptokens_destroy(self, ):
        """
        Destroys stop tokens table.
        """


    def hstring_test(self, verbose):
        """
        Self test of this class.
        """


