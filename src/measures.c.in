/*
 * Harry - A Tool for Measuring String Similarity
 * Copyright (C) 2013-2014 Konrad Rieck (konrad@mlsec.org)
 * --
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 3 of the License, or (at your
 * option) any later version.  This program is distributed without any
 * warranty. See the GNU General Public License for more details. 
 */

/**
 * @defgroup measures Measure interface
 *
 * Interface and functions for computing similarity measures for strings
 *
 * @{
 */

#include "config.h"
#include "common.h"
#include "harry.h"
#include "util.h"
#include "input.h"
#include "hstring.h"
#include "measures.h"
#include "vcache.h"

/* Module headers */
%INCLUDES%

/* External variables */
extern config_t cfg;

/* Global variables */
static cfg_int global_cache;
static int idx = 0;

/* Module interfaces */
%INTERFACES%

/**
 * Find best matching measure name.
 * @param name to check
 */
int measure_match(const char *name)
{
    int r = 0;
    float d, dist = FLT_MAX;

    for (int i = 0; func[i].name; i++) {
        /* Match full name */
        d = fabs(strcasecmp(name, func[i].name));
        if (d < dist) {
            r = i, dist = d;
        }

        /* Match from second token */
        char *token = strchr(func[i].name, '_') + 1;
        d = fabs(strcasecmp(name, token));
        if (d < dist) {
            r = i, dist = d;
        }
    }
    
    if (dist > 0) {
        r = 0;
        warning("Unknown measure '%s'. Using '%s' instead.", name, 
                func[r].name);
    }

    return r;
}

/**
 * Configures the measure for a given similarity measure.
 * @param name Name of similarity measure
 * @return name of selected similarity measure
 */
char *measure_config(const char *name)
{
    const char *cfg_str;

    /* Set delimiters */
    config_lookup_string(&cfg, "measures.token_delim", &cfg_str);
    if (strlen(cfg_str) > 0)
        hstring_delim_set(cfg_str);
    else
        hstring_delim_reset();

    /* Enable global cache */
    config_lookup_int(&cfg, "measures.global_cache", &global_cache);

    /* Configure */
    idx = measure_match(name);
    func[idx].measure_config();
    return func[idx].name;
}

/** 
 * Print list of supported similarity measures
 * @param f File stream 
 */
void measure_fprint(FILE *f)
{
    %LIST%
}

/**
 * Compares two strings with the given similarity measure.
 * @param x first string
 * @param y second second
 * @return similarity/dissimilarity value
 */
double measure_compare(hstring_t x, hstring_t y)
{
    if (!global_cache)
        return func[idx].measure_compare(x, y);

    uint64_t xyk = hstring_hash2(x, y);
    float m = 0;

    if (!vcache_load(xyk, &m, ID_COMPARE)) {
        m = func[idx].measure_compare(x, y);
        vcache_store(xyk, m, ID_COMPARE);
    }
    return m;
}

/** @} */
